package com.xwc.open.example;import com.xwc.open.example.dao.OrgMapper;import com.xwc.open.example.entity.Org;import com.xwc.open.example.query.SelectQuery;import org.junit.Assert;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.util.ArrayList;import java.util.List;/** * 创建人：徐卫超 * 时间：2019/10/15 10:20 * 功能：在自定义查询分为两类 * 对象查询： 自带动态查询 * 参数查询： 查询可以支持动态（利用SQL动态查询技术） * 备注： */@RunWith(SpringRunner.class)@SpringBootTest(classes = Application.class)public class TestSelect {    @Autowired    private OrgMapper orgMapper;    /**     * 当查询对象中查询属性上不指定查询条件时，我们系统默认的是等价查询条件     */    @Test    public void equal() {        //query        SelectQuery equals = new SelectQuery();        equals.setCode("200");        List<Org> list = orgMapper.query(equals);        System.out.println(list.toString());        //param 相等查询        List<Org> listParam = orgMapper.equalParam("200");        System.out.println(list.toString());        Assert.assertEquals(list, listParam);    }    /**     * 不等查询 @NotEqual     */    @Test    public void notEqual() {        //对象查询        SelectQuery query = new SelectQuery();        query.setNotEqualCode("200");        List<Org> list = orgMapper.query(query);        System.out.println(list.toString());        //参数查询        List<Org> listParam = orgMapper.notEqualParam("200");        System.out.println(list.toString());        Assert.assertEquals(list, listParam);    }    @Test    public void isNull() {        //对象查询: 在使用IsNull注解时，当参数不为空时有效，跟属性类型和属性内容无关        SelectQuery query = new SelectQuery();        query.setParentCodeIsNull(true);        List<Org> list = orgMapper.query(query);        System.out.println(list.toString());        //参数查询:  在使用IsNull注解时，只和参数定义有关且参数必须有值        List<Org> listParam = orgMapper.isNullParam(true);        System.out.println(list.toString());        Assert.assertEquals(list, listParam);    }    /**     * IN查询 In     */    @Test    public void inCode() {        List<String> incode = new ArrayList<>();        incode.add("200");        incode.add("200001");        //对象查询 在使用In查询的时候请需要保证数组的成员数量不能为0        SelectQuery query = new SelectQuery();        query.setInCode(incode);        List<Org> list = orgMapper.query(query);        //参数查询 在使用In查询的时候请需要保证数组的成员数量不能为0        System.out.println(list.toString());        List<Org> listParam = orgMapper.inCodeParam(incode);        System.out.println(list.toString());        Assert.assertEquals(list, listParam);    }    /**     * IN查询 In 在使用In查询的时候请需要保证 数组的成员数量不能为0     */    @Test    public void notInCode() {        List<String> incode = new ArrayList<>();        incode.add("200");        incode.add("200001");        //对象查询        SelectQuery query = new SelectQuery();        query.setNotInCode(incode);        List<Org> list = orgMapper.query(query);        System.out.println(list.toString());        //参数查询        List<Org> listParam = orgMapper.notInCodeParam(incode);        System.out.println(list.toString());        Assert.assertEquals(list, listParam);    }    @Test    public void likeCodeParam() {        // 对象查询        SelectQuery query = new SelectQuery();        query.setLikeCode("004");        List<Org> list = orgMapper.query(query);        System.out.println(list.toString());        // 参数查询        List<Org> listParam = orgMapper.likeCodeParam("004");        System.out.println(list.toString());        Assert.assertEquals(list, listParam);    }    @Test    public void leftLikeCode() {        //对象查询        SelectQuery query = new SelectQuery();        query.setLeftLikeCode("004");        List<Org> list = orgMapper.query(query);        System.out.println(list.toString());        //参数查询        List<Org> listParam = orgMapper.leftLikeCodeParam("004");        System.out.println(list.toString());        Assert.assertEquals(list, listParam);    }    @Test    public void rightLikeCode() {        // 对象查询        SelectQuery query = new SelectQuery();        query.setRightLikeCode("200");        List<Org> list = orgMapper.query(query);        System.out.println(list.toString());        // 参数查询        List<Org> listParam = orgMapper.rightLikeCodeParam("200");        System.out.println(list.toString());        Assert.assertEquals(list, listParam);    }    @Test    public void gtEmployeesNum50() {        // 对象查询        SelectQuery query = new SelectQuery();        query.setGtEmployeesNum(50);        List<Org> list = orgMapper.query(query);        System.out.println(list.toString());        // 参数查询        List<Org> listParam = orgMapper.gtEmployeesNum50Param(50);        System.out.println(list.toString());        Assert.assertEquals(list, listParam);    }    @Test    public void gtqEmployeesNum50() {        // 对象查询        SelectQuery query = new SelectQuery();        query.setGtqEmployeesNum(50);        List<Org> list = orgMapper.query(query);        System.out.println(list.toString());        // 参数查询        List<Org> listParam = orgMapper.gtqEmployeesNum50Param(50);        System.out.println(list.toString());        Assert.assertEquals(list, listParam);    }    @Test    public void ltEmployeesNum50() {        // 对象查询        SelectQuery query = new SelectQuery();        query.setLtEmployeesNum(15);        List<Org> list = orgMapper.query(query);        System.out.println(list.toString());        // 参数查询        List<Org> listParam = orgMapper.ltEmployeesNum50Param(15);        System.out.println(listParam.toString());        Assert.assertEquals(list, listParam);    }    @Test    public void ltqEmployeesNum50() {        // 对象查询        SelectQuery query = new SelectQuery();        query.setLtqEmployeesNum(15);        List<Org> list = orgMapper.query(query);        System.out.println(list.toString());        // 参数查询        List<Org> listParam = orgMapper.ltqEmployeesNum50Param(15);        System.out.println(list.toString());        Assert.assertEquals(list, listParam);    }    @Test    public void listPage() {        SelectQuery query = new SelectQuery();        query.setPageNum(2);        query.setPageSize(5);        // 对象查询        List<Org> list = orgMapper.query(query);        // 参数查询        List<Org> listParam = orgMapper.queryParam((query.getPageNum() - 1) * 5, query.getPageSize());        System.out.println(list);        Assert.assertEquals(list, listParam);    }    @Test    public void listCount() {        SelectQuery query = new SelectQuery();        query.setPageNum(2);        query.setPageSize(5);        query.setCode("200");        // 对象查询        Long count = orgMapper.count(query);        System.out.println(count);        // 参数查询        Long countParam = orgMapper.queryParamCount((query.getPageNum() - 1) * 5, query.getPageSize(), query.getCode());        System.out.println(countParam);        Assert.assertEquals(count, countParam);    }    @Test    public void disticn() {        SelectQuery query = new SelectQuery();        query.setLeftLikeCode("004");        // 对象查询        List<Org> list = orgMapper.distinct(query);        System.out.println(list.toString());        // 参数查询        List<Org> listParam = orgMapper.distinctParam("004");        System.out.println(list.toString());        Assert.assertEquals(list,listParam);    }    @Test    public void manyQuery(){        List<String> incode = new ArrayList<>();        incode.add("200");        incode.add("200001");        incode.add("200004");        SelectQuery query = new SelectQuery();        query.setInCode(incode);        query.setLtEmployeesNum(50);        // 对象查询        List<Org> list = orgMapper.query(query);        System.out.println(list);        // 参数查询        List<Org> listParam = orgMapper.manyQuery(incode, query.getLtEmployeesNum());        System.out.println(listParam);        Assert.assertEquals(list,listParam);    }    @Test    public void orderBy(){        SelectQuery query = new SelectQuery();        // 对象查询        query.setOrderEmployeesNum("code");        List<Org> list = orgMapper.query(query);        System.out.println(list);        // 参数查询        List<Org> listParam = orgMapper.orderEmployeesNum("code");        System.out.println(listParam);        Assert.assertEquals(list,listParam);    }}