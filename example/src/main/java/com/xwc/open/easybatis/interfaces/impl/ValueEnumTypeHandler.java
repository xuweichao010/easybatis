package com.xwc.open.easybatis.interfaces.impl;import com.xwc.open.easybatis.interfaces.BaseCodeEnum;import org.apache.ibatis.type.BaseTypeHandler;import org.apache.ibatis.type.JdbcType;import java.sql.CallableStatement;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;/** * 创建人：徐卫超 * 时间：2019/10/21 11:36 * 功能： * 备注： */public class ValueEnumTypeHandler<E extends Enum<?> & BaseCodeEnum> extends BaseTypeHandler<BaseCodeEnum> {    private Class<E> type;    public ValueEnumTypeHandler(Class<E> type) {        if (type == null) {            throw new IllegalArgumentException("Type argument cannot be null");        }        this.type = type;    }    @Override    public void setNonNullParameter(PreparedStatement ps, int i, BaseCodeEnum parameter, JdbcType jdbcType)            throws SQLException {        ps.setInt(i, parameter.getCode());    }    @Override    public E getNullableResult(ResultSet rs, String columnName) throws SQLException {        int code = rs.getInt(columnName);        return rs.wasNull() ? null : codeOf(code);    }    @Override    public E getNullableResult(ResultSet rs, int columnIndex) throws SQLException {        int code = rs.getInt(columnIndex);        return rs.wasNull() ? null : codeOf(code);    }    @Override    public E getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {        int code = cs.getInt(columnIndex);        return cs.wasNull() ? null : codeOf(code);    }    private E codeOf(int code) {        try {            E[] enumConstants = type.getEnumConstants();            for (E e : enumConstants) {                if (e.getCode() == code)                    return e;            }        } catch (Exception ex) {            throw new IllegalArgumentException("Cannot convert " + code + " to " + type.getSimpleName() + " by code value.", ex);        }        return null;    }}