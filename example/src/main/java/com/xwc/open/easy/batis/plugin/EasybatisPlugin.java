package com.xwc.open.easy.batis.plugin;import com.xwc.open.easy.batis.assistant.AnnotationAssistan;import com.xwc.open.easy.batis.assistant.DefaultPrimaryKeyBuilder;import com.xwc.open.easy.batis.assistant.Reflection;import com.xwc.open.easy.batis.enums.AuditorType;import com.xwc.open.easy.batis.enums.IdType;import com.xwc.open.easy.batis.excp.EasybatisException;import com.xwc.open.easy.batis.interfaces.AuditorAware;import com.xwc.open.easy.batis.interfaces.PrimaryKeyBuilder;import com.xwc.open.easy.batis.interfaces.impl.DefaultAuditorAware;import com.xwc.open.easy.batis.meta.Attribute;import com.xwc.open.easy.batis.meta.AuditorAttribute;import com.xwc.open.easy.batis.meta.LoglicAttribute;import com.xwc.open.easy.batis.meta.MethodMate;import org.apache.ibatis.executor.statement.StatementHandler;import org.apache.ibatis.mapping.MappedStatement;import org.apache.ibatis.mapping.SqlCommandType;import org.apache.ibatis.plugin.*;import org.apache.ibatis.reflection.MetaObject;import org.apache.ibatis.reflection.SystemMetaObject;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.sql.Statement;import java.util.*;import java.util.stream.Collectors;/** * 创建人：徐卫超 * 时间：2019/9/7 8:17 * 功能： * 备注： */@Intercepts({@Signature(        type = StatementHandler.class,        method = "parameterize",        args = {Statement.class})})public class EasybatisPlugin implements Interceptor {    private static final Logger logger = LoggerFactory.getLogger(EasybatisPlugin.class);    private static Map<String, MethodMate> methodMap = new HashMap<>();    private static final String PARAM_OBJECT = "parameterHandler.parameterObject";    private static final String MAPPED_STATEMENT = "parameterHandler.mappedStatement";    private AuditorAware auditorAware = new DefaultAuditorAware();    private PrimaryKeyBuilder primaryKeyBuilder = new DefaultPrimaryKeyBuilder();    @Override    public Object intercept(Invocation invocation) throws Throwable {        MetaObject metaObject = SystemMetaObject.forObject(invocation.getTarget());        MappedStatement ms = (MappedStatement) metaObject.getValue(MAPPED_STATEMENT);        if (ms.getSqlCommandType() != SqlCommandType.INSERT &&                ms.getSqlCommandType() != SqlCommandType.UPDATE &&                ms.getSqlCommandType() != SqlCommandType.SELECT &&                ms.getSqlCommandType() != SqlCommandType.DELETE) {            return invocation.proceed();        }        MethodMate methodMate = methodMap.get(ms.getId());        if (methodMate == null) {            return invocation.proceed();        }        Object value = metaObject.getValue(PARAM_OBJECT);        if (ms.getSqlCommandType() == SqlCommandType.INSERT) {            value = analysisInsertParam(value, methodMate);        } else if (ms.getSqlCommandType() == SqlCommandType.UPDATE) {            value = analysisUpdateParam(value, methodMate);        } else if (ms.getSqlCommandType() == SqlCommandType.SELECT) {            value = analysisSelectParam(value, methodMate);        }        metaObject.setValue(PARAM_OBJECT, value);        return invocation.proceed();    }    private Object analysisSelectParam(Object value, MethodMate methodMate) {        if (methodMate.getParamNames().size() == 1) {            HashMap<String, Object> map = new HashMap<>();            if (methodMate.isHaveParamKey()) {                map.put(methodMate.getId().getField(), value);            } else if (Collection.class.isAssignableFrom(value.getClass())) {                return value;            } else if (AnnotationAssistan.isDefualtClass(value.getClass())) {                map.put(methodMate.getParamNames().get(0), value);                return map;            } else {                return value;            }        }        return value;    }    private Object analysisUpdateParam(Object value, MethodMate methodMate) {        if (value instanceof Map) {            Map map = (Map) value;            map.forEach((k, v) -> {                if (v instanceof List) {                    List list = (List) v;                    list.forEach(item -> insertObjectAuditor(item, methodMate.getAuditorAttributeList(), SqlCommandType.UPDATE));                } else {                    //                }            });        } else if (!AnnotationAssistan.isDefualtClass(value.getClass())) {            insertObjectAuditor(value, methodMate.getAuditorAttributeList(), SqlCommandType.UPDATE);        }        return value;    }    /**     * 解析插入可能出现的情况     *     * @param object     * @param methodMate     * @return     */    private Object analysisInsertParam(Object object, MethodMate methodMate) {        if (object instanceof Map) {            Map map = (Map) object;            map.forEach((k, v) -> {                if (v instanceof List) {                    List list = (List) v;                    list.forEach(item -> {                        if (!AnnotationAssistan.isDefualtClass(item.getClass())) {                            insertObject(item, methodMate);                        }                    });                }            });        } else if (!AnnotationAssistan.isDefualtClass(object.getClass())) {            insertObject(object, methodMate);        }        return object;    }    /**     * 对插入对象进行 进行ID处理、逻辑删除字段处理、审计字段处理     *     * @param object     * @param methodMate     */    private void insertObject(Object object, MethodMate methodMate) {        //处理主键        if (methodMate.getType() == IdType.UUID) {            setterValue(object, methodMate.getId(), primaryKeyBuilder.uuid());        }        //处理逻辑删除字段        LoglicAttribute logic = methodMate.getLogic();        if (logic != null) {            setterValue(object, logic, logic.getValid());        }        //处理审计功能字段        if (!methodMate.getAuditorAttributeList().isEmpty()) {            insertObjectAuditor(object, methodMate.getAuditorAttributeList(), SqlCommandType.INSERT);        }    }    @Override    public Object plugin(Object target) {        Object wrap = Plugin.wrap(target, this);        return wrap;    }    private Object setterAuditor(Object value, SqlCommandType commandType, List<AuditorAttribute> attributeList) {        //处理插入数据是数组        if (value instanceof Map) {            Map map = (Map) value;            map.forEach((k, v) -> {                if (v instanceof List) {                    List list = (List) v;                    list.forEach(item -> insertObjectAuditor(item, attributeList, commandType));                } else {                    //                }            });        } else if (!AnnotationAssistan.isDefualtClass(value.getClass())) {            attributeList.forEach(item -> insertObjectAuditor(value, attributeList, commandType));        }        return value;    }    private void insertObjectAuditor(Object value, List<AuditorAttribute> attributeList, SqlCommandType sqlCommandType) {        attributeList.forEach(auditor -> {            if (sqlCommandType == SqlCommandType.INSERT) {                if (auditor.getType() == AuditorType.CREATE_ID) {                    setterValue(value, auditor, auditorAware.id());                } else if (auditor.getType() == AuditorType.CREATE_NAME) {                    setterValue(value, auditor, auditorAware.name());                } else if (auditor.getType() == AuditorType.CREATE_TIME) {                    setterValue(value, auditor, auditorAware.time());                }            }            if (auditor.getType() == AuditorType.UPDATE_ID) {                setterValue(value, auditor, auditorAware.id());            } else if (auditor.getType() == AuditorType.UPDATE_NAME) {                setterValue(value, auditor, auditorAware.name());            } else if (auditor.getType() == AuditorType.UPDATE_TIME) {                setterValue(value, auditor, auditorAware.time());            }        });    }    private void setterValue(Object object, Attribute attribute, Object value) {        try {            attribute.getSetter().invoke(object, value);        } catch (Exception e) {            throw new EasybatisException(object.getClass().toString() + "无法获可用的setter方法" + attribute.getField());        }    }    @Override    public void setProperties(Properties properties) {    }    public static void addMethodMate(String methodId, MethodMate mate) {        methodMap.put(methodId, mate);    }}