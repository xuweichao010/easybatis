package com.xwc.open.easy.batis.assistant;import com.xwc.open.easy.batis.meta.*;import com.xwc.open.easy.batis.anno.ParamKey;import com.xwc.open.easy.batis.anno.condition.Count;import com.xwc.open.easy.batis.anno.condition.Distinct;import com.xwc.open.easy.batis.enums.ConditionType;import com.xwc.open.easy.batis.interfaces.SQLAssistant;import com.xwc.open.easy.batis.interfaces.SyntaxTemplate;import java.util.List;/** * 创建人：徐卫超 * 时间：2019/8/15 17:28 * 功能： * 备注： */public class MySQLAssistan extends BaseSqlAssistan implements SQLAssistant {    private SyntaxTemplate syntaxTemplate;    public MySQLAssistan(SyntaxTemplate syntaxTemplate) {        this.syntaxTemplate = syntaxTemplate;    }    @Override    public StringBuilder delete(EntityMate entity, ConditionMate condition, boolean isObject, boolean isDynamic, ParamKey key) {        if (key != null) {            isDynamic = false;            condition.queryClear();            condition.add(new ConditionAttribute(entity.getId(), 0, ConditionType.EQUEL));        }        StringBuilder sb = new StringBuilder();        sb.append(" <script> ");        sb.append(" DELETE FROM ").append(entity.getTableName());        sb.append(builderSelectSql(condition.queryList(), isObject, isDynamic, entity.getLogic()));        sb.append(" </script> ");        return sb;    }    @Override    public StringBuilder select(EntityMate entity, ConditionMate condition, boolean isObject, boolean isDynamic, Count count, Distinct distinct, ParamKey key) {        if (key != null) {            isDynamic = false;            condition.queryClear();            condition.add(new ConditionAttribute(entity.getId(), 0, ConditionType.EQUEL));        }        StringBuilder sb = new StringBuilder();        sb.append(" <script> ");        sb.append(" SELECT ").append(this.selectCloums(entity.selectAttribute())).append(" FROM ").append(entity.getTableName());        sb.append(builderSelectSql(condition.queryList(), isObject, isDynamic, entity.getLogic()));        sb.append(" </script> ");        return sb;    }    @Override    public StringBuilder insert(EntityMate entity, boolean isBatch) {        if (isBatch) {            return insertBatch(entity);        } else {            return insert(entity);        }    }    public StringBuilder insertBatch(EntityMate entity) {        StringBuilder sb = new StringBuilder();        sb.append(" <script> ");        sb.append(" INSERT INTO ").append(entity.getTableName());        sb.append(" (").append(this.insertCloums(entity.insertAttribute()))                .append(") VALUES <foreach collection='list' item='item' index='index' separator=',' >")                .append("(").append(this.insertField(entity.insertAttribute(), "item")).append(")")                .append("</foreach>");        sb.append(" </script> ");        return sb;    }    public StringBuilder insert(EntityMate entity) {        StringBuilder sb = new StringBuilder();        sb.append(" <script> ");        sb.append(" INSERT INTO ").append(entity.getTableName());        sb.append(" (").append(this.insertCloums(entity.insertAttribute()))                .append(") VALUES (")                .append(this.insertField(entity.insertAttribute(), null)).append(")");        sb.append(" </script> ");        return sb;    }    @Override    public StringBuilder update(EntityMate entity, ConditionMate condition, boolean isUpdateParam, boolean isDynamic) {        StringBuilder sb = new StringBuilder();        if (!isUpdateParam) {            isDynamic = false;            condition.queryClear();            condition.add(new ConditionAttribute(entity.getId(), 0, ConditionType.EQUEL));            entity.updateAttribute().forEach(attr -> condition.add(new ConditionAttribute(attr, 0, ConditionType.SET_PARAM)));        }        sb.append(" <script> ");        sb.append(" UPDATE ").append(entity.getTableName()).append(" SET ");        if (condition.setAttributeList().isEmpty()) {            throw new RuntimeException("没有更新条件");        } else {            sb.append(update(condition.setAttributeList()));        }        sb.append(builderSelectSql(condition.queryList(), false, isDynamic, entity.getLogic()));        sb.append(" </script> ");        return sb;    }    private String update(List<ConditionAttribute> attributeList) {        StringBuilder sb = new StringBuilder();        attributeList.forEach(attr -> sb                .append(", ")                .append(attr.getColunm()).append("=")                .append(attr.getBatisField(null)));        return sb.substring(1);    }    /**     * 构建查询条件     *     * @param list     * @param isObject     * @param isDynamic     * @return     */    private StringBuilder builderSelectSql(List<ConditionAttribute> list, boolean isObject, boolean isDynamic, LoglicAttribute auditorAttr) {        StringBuilder sb = new StringBuilder();        if (isObject) {            if (auditorAttr == null) sb.append("<where> ");            list.forEach(cond -> sb.append(builderQueryObjectSql(cond)));            if (auditorAttr != null)                sb.append("AND " + builderQueryParamSql(new LoglicConditionAttribute(auditorAttr, false), false));            if (auditorAttr == null) sb.append("</where> ");            return sb;        } else {            list.forEach(cond -> sb.append("AND ").append(builderQueryParamSql(cond, isDynamic)));            if (auditorAttr != null)                sb.append("AND " + builderQueryParamSql(new LoglicConditionAttribute(auditorAttr, false), false));            StringBuilder sb2 = new StringBuilder(sb.substring(sb.length() > 4 ? 4 : 0));            sb2.insert(0, "WHERE ");            return sb2;        }    }    /**     * 查询对象来构建动态SQL     *     * @param cond     * @return     */    private String builderQueryObjectSql(ConditionAttribute cond) {        return String.format(SyntaxTemplate.TMPLATE_IF, cond.getField(), SyntaxTemplate.AND + querySql(cond));    }    /**     * 方法参数来构建动态SQL     *     * @param cond     * @param isDynamic     * @return     */    private String builderQueryParamSql(ConditionAttribute cond, boolean isDynamic) {        String sql = querySql(cond);        if (isDynamic) {            sql = String.format(SyntaxTemplate.TMPLATE_PRARM_IS_NULL, cond.getColunm(), sql);        }        return sql;    }    /**     * 获取查询条件     *     * @param cond     * @return     */    private String querySql(ConditionAttribute cond) {        TemplateMate template = syntaxTemplate.template(cond.getType());        String sql;        switch (template.getType()) {            case CLOUM_FIELD:                sql = String.format(template.getTemplate(),                        cond.getColunm(),                        cond.getBatisField(null));                return sql;            case JUDGE_NULL:                sql = String.format(template.getTemplate(),                        cond.getColunm());                break;            case CLOUM_IN_FILED:                sql = String.format(template.getTemplate(),                        cond.getColunm(),cond.getField());                break;            default:                throw new RuntimeException("不支持的查询条件");        }        return sql;    }}