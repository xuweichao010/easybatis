package com.xwc.open.easybatis.core;import com.xwc.open.easybatis.core.enums.IdType;import com.xwc.open.easybatis.core.model.MethodMeta;import com.xwc.open.easybatis.core.mysql.MysqlSqlSourceGenerator;import com.xwc.open.easybatis.core.support.AuditorContext;import com.xwc.open.easybatis.core.support.PlaceholderBuilder;import com.xwc.open.easybatis.core.support.SqlSourceGenerator;import org.apache.ibatis.session.Configuration;import java.util.HashSet;import java.util.Map;import java.util.Set;import java.util.concurrent.ConcurrentHashMap;public class EasybatisConfiguration {    private Configuration configuration;    /**     * 如果 tablePrefix 有值就默认开启根据类名映射标明     */    private String tablePrefix;    private IdType idType;    /**     * 显示创建SQL的日志     */    private boolean generatorSqlLogger = false;    protected final Set<String> loadedResources = new HashSet<>();    private final AnnotationAssistant annotationAssistant;    private final SqlSourceGenerator sqlSourceGenerator;    private final PlaceholderBuilder placeholderBuilder;    private final Map<String, MethodMeta> methodMetaMap = new ConcurrentHashMap<>();    private AuditorContext auditorContext = new DefaultAuditorContext();    public EasybatisConfiguration(Configuration configuration) {        this.configuration = configuration;        this.annotationAssistant = new AnnotationAssistant(this);        this.placeholderBuilder = new MyBatisPlaceholderBuilder();        this.sqlSourceGenerator = new MysqlSqlSourceGenerator(placeholderBuilder);        this.configuration.addInterceptor(new ExecutorHandlerInterceptor(this));    }    public EasybatisConfiguration(Configuration configuration, SqlSourceGenerator sqlSourceGenerator,                                  AnnotationAssistant annotationAssistant, PlaceholderBuilder placeholderBuilder) {        this.configuration = configuration;        this.annotationAssistant = annotationAssistant;        this.sqlSourceGenerator = sqlSourceGenerator;        this.placeholderBuilder = placeholderBuilder;    }    public MethodMeta getMethodMeta(String mappedStatementId) {        return methodMetaMap.get(mappedStatementId);    }    public void addMethodMeta(String mappedStatementId, MethodMeta methodMeta) {        this.methodMetaMap.put(mappedStatementId, methodMeta);    }    public boolean isUseActualParamName() {        return configuration.isUseActualParamName();    }    public boolean isMapUnderscoreToCamelCase() {        return configuration.isMapUnderscoreToCamelCase();    }    public IdType useGlobalPrimaKeyType() {        return idType;    }    public Configuration getMybatisConfiguration() {        return configuration;    }    public void setMybatisConfiguration(Configuration configuration) {        this.configuration = configuration;    }    public String getTablePrefix() {        return tablePrefix;    }    public void setTablePrefix(String tablePrefix) {        this.tablePrefix = tablePrefix;    }    public IdType getIdType() {        return idType;    }    public void setIdType(IdType idType) {        this.idType = idType;    }    public void addMapper(Class<?> mapperClass) {        if (!this.configuration.hasMapper(mapperClass)) {            configuration.addMapper(mapperClass);        }        EasybatisMapperAnnotationBuilder easybatisMapperAnnotationBuilder =                new EasybatisMapperAnnotationBuilder(this, mapperClass);        easybatisMapperAnnotationBuilder.parse();    }    public PlaceholderBuilder getPlaceholderBuilder() {        return placeholderBuilder;    }    public AnnotationAssistant getAnnotationAssistant() {        return annotationAssistant;    }    public boolean isResourceLoaded(String resource) {        return this.loadedResources.contains(resource);    }    public void addLoadedResource(String resource) {        this.loadedResources.add(resource);    }    public SqlSourceGenerator getSqlSourceGenerator() {        return sqlSourceGenerator;    }    public void setAuditorContext(AuditorContext auditorContext) {        this.auditorContext = auditorContext;    }    public AuditorContext getAuditorContext() {        return auditorContext;    }    public boolean isGeneratorSqlLogger() {        return generatorSqlLogger;    }    public void setGeneratorSqlLogger(boolean generatorSqlLogger) {        this.generatorSqlLogger = generatorSqlLogger;    }}