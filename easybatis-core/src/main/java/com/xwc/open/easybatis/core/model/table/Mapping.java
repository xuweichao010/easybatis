package com.xwc.open.easybatis.core.model.table;import com.xwc.open.easybatis.core.commons.AnnotationUtils;import com.xwc.open.easybatis.core.commons.StringUtils;import lombok.Data;import java.lang.annotation.Annotation;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.util.Map;import java.util.Objects;import java.util.Set;import java.util.stream.Collectors;import java.util.stream.Stream;/** * 创建人：徐卫超 时间：2019/8/3 16:35 功能：对象的属性描述 */@Datapublic class Mapping {    /**     * 是否需要进行result映射     */    private boolean result;    /**     * 属性的名字     */    private String field;    /**     * 属性的getter 方法     */    private Method getter;    /**     * 属性的setter 方法     */    private Method setter;    /**     * 和数据库的对应关系     */    private String column;    /**     * 查询忽略     */    private boolean selectIgnore;    /**     * 更新忽略     */    private boolean updateIgnore;    /**     * 插入忽略     */    private boolean insertIgnore;    private Field source;    private Set<Annotation> annotationSet;    public Mapping(String field, Method getter, Method setter, String column, Field fieldSource,            boolean selectIgnore, boolean updateIgnore, boolean insertIgnore) {        this.field = field;        this.getter = getter;        this.setter = setter;        this.column = column;        this.selectIgnore = selectIgnore;        this.updateIgnore = updateIgnore;        this.insertIgnore = insertIgnore;        this.source = fieldSource;        this.annotationSet = Stream.of(fieldSource.getDeclaredAnnotations()).collect(Collectors.toSet());    }    public static Mapping builder(Field field, Method getter, Method setter, String column) {        return new Mapping(field.getName(), getter, setter, column, field, false, false, false);    }    public Mapping(Mapping meta) {        this.field = meta.field;        this.getter = meta.getter;        this.setter = meta.setter;        this.column = meta.column;        this.selectIgnore = meta.selectIgnore;        this.updateIgnore = meta.updateIgnore;        this.insertIgnore = meta.insertIgnore;        this.source = meta.source;        this.annotationSet = meta.annotationSet;    }    public <T extends Annotation> T chooseAnnotationType(Class<T> annotationClass) {        return AnnotationUtils.findAnnotation(this.source, annotationClass);    }    public boolean hashAnnotationType(Class<? extends Annotation> annotationClass) {        return chooseAnnotationType(annotationClass) != null;    }    public void mergeAnnotationAttributes(Map<String, Object> map) {        String value = (String) map.get("value");        if (StringUtils.hasText(value) && !Objects.equals(value, this.column)) {            this.column = value;            this.result = true;        }        Boolean selectIgnore = (Boolean) map.get("selectIgnore");        if (selectIgnore != null) {            this.selectIgnore = selectIgnore;        }        Boolean updateIgnore = (Boolean) map.get("updateIgnore");        if (updateIgnore != null) {            this.updateIgnore = updateIgnore;        }        Boolean insertIgnore = (Boolean) map.get("insertIgnore");        if (insertIgnore != null) {            this.insertIgnore = insertIgnore;        }    }    public Class<?> mappingType() {        return this.source.getType();    }}